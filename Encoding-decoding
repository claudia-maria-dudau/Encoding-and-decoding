.data
p: .space 4
s1: .space 100
s2: .space 100
put: .space 400
mscit1: .asciiz "Sirul de criptat: "
mscit2: .asciiz "Sirul de decriptat: "
ms0: .asciiz "p este 0 sau negativ"
ms1: .asciiz "p nu este prim"
ms2: .asciiz "Generatorul g este: "
ms3: .asciiz "Mesajul criptat este: "
ms4: .asciiz "Mesajul decriptat este: "
sp: .asciiz "\n"
alf: .asciiz "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

.text

main:
# citire date
# citire p
li $v0,5
syscall
move $t0,$v0  # p
sb $t0,p

# citire s1
la $a0,mscit1
li $v0,4
syscall
la $a0,s1
la $a1,100
li $v0,8
syscall

# citire s2
la $a0,mscit2
li $v0,4
syscall
la $a0,s2
la $a1,100
li $v0,8
syscall

# verificare daca p e nr prim
ble $t0,0,pneg # verificare daca p <= 0
beq $t0,1,pnp  # verificare daca p = 1
beq $t0,2,pp  # verificare daca p = 2
rem $t2,$t0,2
beqz $t2,pnp  # verificare daca p != 2 dar p % 2 = 0
li $t1,3  # divizor

forprim:  # verificare daca p are divizori proprii
	mul $t3,$t1,$t1  # calculez patratul divizorului
	bgt $t3,$t0,pp  # conditie iesire for (am depasit sqrt(s))
	rem $t2,$t0,$t1 
	beqz $t2,pnp  # verificare  p % divisor = 0 

	# crestere divizor
	addi $t1,$t1,2
	j forprim

pneg: #p este <=0
	# afisare mesaj corespunzator
	la $a0,ms0
	li $v0,4
	syscall

	# iesire program
	li $v0,10
	syscall

pnp:  # p nu e prim
	# afisare mesaj corespunzator
	la $a0,ms1
	li $v0,4
	syscall

	# iesire program
	li $v0,10
	syscall
	
pp:  # p e prim
	# determinare generator
	li $t1,1
	li $t2,0  # locatie memorie vector puteri
	sw $t1,put($t2)  # adaug 1 in vectorul de puteri
	li $t1,2  # generatorul (g)
	
	forgen:
		li $t2,4
		sw $t1,put($t2)  # adaug g in vectorul de puteri
		addi $t2,$t2,4
		move $t3,$t1  # valoarea puterii curente a lui g
		li $t4,1  # puterea la care este ridicat g
		
		whileputg:
			beq $t3,1,verifput  # conditie iesire while (valoare putere g = 1)
			mul $t3,$t3,$t1 
			rem $t3,$t3,$t0  # calculez valoarea urmatoarei puteri a lui g
			addi $t4,$t4,1  # cresc puterea			
			sw $t3,put($t2)  # adaug valoarea puterii in vectorul de puteri
			
			# incrementare pozitie in vectorul de puteri
addi $t2,$t2,4
			j whileputg
		
		verifput:  #verific daca puterea la care g da 1 este p-1
			addi $t4,$t4,1
			beq $t4,$t0,gasitgen  # iesire for

			# crestere generator
			addi $t1,$t1,1
			j forgen
	
	gasitgen: 
		# afisare generator
		la $a0,ms2
		li $v0,4
		syscall
		move $a0,$t1
		li $v0,1
		syscall
		la $a0,sp
		li $v0,4
		syscall
		
		# criptare
		# afisare mesaj
		la $a0,ms3
		li $v0,4
		syscall

		li $t2,0  # locatie memorie sir
		lb $t3,s1($t2)  # caracter sir
		
		fors1:
			beq $t3,'\n',exit1  # conditie iesire for (carcater sir = ‘\n’)
			sub $t4,$t3,'A'
			mul $t4,$t4,4  # pozitie in vectorul de puteri
			
# afisare caract
			lb $t5,put($t4)  # pozitie in alfabet
			lb $a0,alf($t5)
			li $v0,11
			syscall
			
			# trecere la urmatorul caractr din sir
addi $t2,$t2,1
			lb $t3,s1($t2)
			j fors1
			
		exit1:  # decriptare
			# afisare mesaj
			la $a0,sp
			li $v0,4
			syscall
			la $a0,ms4
			li $v0,4
			syscall

			li $t2,0  # locatie memorie sir
			lb $t3,s2($t2)  # caracter sir
			
			fors2:
				beqz $t3,exit2  # conditie iesire for (character sir = ‘\0’) – TIO
				beq $t3, '\n',exit2  # conditie iesire for - MARS
				sub $t4,$t3,'A'  # valoarea puterii lui g
				li $t5,0
				lb $t6,put($t5) 
				
			whileput: # determinare pozitie din vectorul de puteri corespunzatoare valoarii din $t4
					beq $t4,$t6,gasitpoz  # conditie iesire while (gasire pozitie)
					
					# incrementare pozitie in vectorul de puteri
addi $t5,$t5,4
					lb $t6,put($t5)
					j whileput
				
				gasitpoz:  # detereminare litera dupa decriptare
					div $t5,$t5,4  # pozitie in alfabet

					# afisare caract
					lb $a0,alf($t5)
					li $v0,11
					syscall

					# trecere la urmatorul caracter din sir
					addi $t2,$t2,1
					lb $t3,s2($t2)
					j fors2
					
			exit2:  # iesire program
				li $v0,10
				syscall
